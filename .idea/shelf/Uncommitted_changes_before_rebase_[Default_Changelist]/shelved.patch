Index: app/src/main/java/com/example/burgertracker/map/MapActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.burgertracker.map\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Window\r\nimport android.widget.*\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.findNavController\r\nimport com.example.burgertracker.R\r\nimport com.example.burgertracker.databinding.MapActivityBinding\r\nimport com.example.burgertracker.databinding.NavHeaderBinding\r\nimport com.example.burgertracker.login.LoginFragment\r\nimport com.firebase.ui.auth.AuthUI\r\n\r\nprivate const val TAG = \"MapActivity\"\r\n\r\n\r\nclass MapActivity : AppCompatActivity() {\r\n    lateinit var binding: MapActivityBinding\r\n    private lateinit var navHeaderBinding: NavHeaderBinding\r\n    private lateinit var mapViewModel: MapViewModel\r\n    private val MapActivityBinding.toggle: ActionBarDrawerToggle by lazy { setToggle() }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        Log.d(TAG, \"onCreate() called, ${this.hashCode()}\")\r\n        super.onCreate(savedInstanceState)\r\n        mapViewModel = ViewModelProvider(this).get(MapViewModel::class.java)\r\n        requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        binding = MapActivityBinding.inflate(layoutInflater)\r\n        navHeaderBinding = NavHeaderBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        setSupportActionBar(binding.toolbar).also {\r\n            title = null\r\n        }\r\n        initDrawerAndNavigation()\r\n    }\r\n\r\n    override fun onStart() {\r\n        Log.d(TAG, \"onStart() called\")\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onResume() {\r\n        Log.d(TAG, \"onResume() called\")\r\n        super.onResume()\r\n    }\r\n\r\n    override fun onPause() {\r\n        Log.d(TAG, \"onPause() called\")\r\n        super.onPause()\r\n    }\r\n\r\n    override fun onStop() {\r\n        Log.d(TAG, \"onStop() called\")\r\n        super.onStop()\r\n    }\r\n\r\n    override fun onPostCreate(savedInstanceState: Bundle?) {\r\n        Log.d(TAG, \"onPostCreate() called\")\r\n        super.onPostCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        Log.d(TAG, \"onDestroy() called\")\r\n        super.onDestroy()\r\n    }\r\n\r\n    /**\r\n     * checks if the navigation drawer is open and if so it will close it on back press otherwise close the activity\r\n     */\r\n    override fun onBackPressed() {\r\n        if (binding.drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            binding.drawerLayout.closeDrawer(GravityCompat.START)\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the DrawerLayout and side navigation\r\n     */\r\n    private fun initDrawerAndNavigation() {\r\n        binding.logout.setOnClickListener {\r\n            mapViewModel.appMap.value?.clear()\r\n            mapViewModel.placesList.value?.clear()\r\n            mapViewModel.currentUser.value = null\r\n            mapViewModel.currentUserPhoto.value = null\r\n            AuthUI.getInstance()\r\n                .signOut(this)\r\n                .addOnCompleteListener {\r\n                    findNavController(R.id.nav_host_fragment).navigate(R.id.action_to_loginFragment)\r\n                }\r\n            binding.drawerLayout.close()\r\n        }\r\n        binding.navView.setNavigationItemSelectedListener {\r\n            when (it.itemId) {\r\n                R.id.mapItem -> {\r\n                    Log.d(TAG, \"map item clicked\")\r\n                    findNavController(R.id.nav_host_fragment).navigate(R.id.action_to_mapFragment)\r\n                    binding.drawerLayout.close()\r\n                }\r\n                R.id.settingsItem -> {\r\n                    Log.d(TAG, \" settings item clicked\")\r\n                    findNavController(R.id.nav_host_fragment).navigate(R.id.action_mapFragment_to_settingsFragment)\r\n                    binding.drawerLayout.close()\r\n                }\r\n            }\r\n            return@setNavigationItemSelectedListener true\r\n        }\r\n        mapViewModel.currentFragment.observe(this, {\r\n            when (it) {\r\n                is LoginFragment -> {\r\n                    binding.toggle.isDrawerIndicatorEnabled =\r\n                        false // disables the DrawerMenuButton when LoginFragment is visible\r\n                }\r\n                else -> {\r\n                    binding.toggle.isDrawerIndicatorEnabled = true\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setToggle(): ActionBarDrawerToggle {\r\n        val toggle = ActionBarDrawerToggle(\r\n            this,\r\n            binding.drawerLayout,\r\n            binding.toolbar,\r\n            R.string.drawer_open,\r\n            R.string.drawer_close\r\n        )\r\n        toggle.syncState()\r\n        return toggle\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/burgertracker/map/MapActivity.kt	(revision 828d99583af4d82090c9ed37baee56890d509326)
+++ app/src/main/java/com/example/burgertracker/map/MapActivity.kt	(date 1610581511685)
@@ -112,7 +112,7 @@
         }
         mapViewModel.currentFragment.observe(this, {
             when (it) {
-                is LoginFragment -> {
+                LoginFragment::class.java.name -> {
                     binding.toggle.isDrawerIndicatorEnabled =
                         false // disables the DrawerMenuButton when LoginFragment is visible
                 }
Index: app/src/main/java/com/example/burgertracker/map/MapViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.burgertracker.map\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.graphics.Bitmap\r\nimport android.location.Location\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.MediatorLiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.burgertracker.AppRepository\r\nimport com.example.burgertracker.R\r\nimport com.example.burgertracker.data.Place\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.squareup.picasso.Picasso\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\nprivate const val TAG = \"MapViewModel\"\r\n\r\nclass MapViewModel(application: Application) : AndroidViewModel(application) {\r\n    private val appKey = application.resources.getString(R.string.google_maps_key)\r\n    private val appRepository = AppRepository()\r\n    var isMapAvailable = false // becomes true when onMapReady() is called\r\n    val appMap = MutableLiveData<GoogleMap>()\r\n    val currentUser = MutableLiveData<FirebaseUser?>()\r\n    val currentUserPhoto = MutableLiveData<Bitmap>()\r\n    val currentFragment = MutableLiveData<Fragment>()\r\n    val placesList = MutableLiveData<ArrayList<Place>>()\r\n    val mediator = MediatorLiveData<ArrayList<Place>>()\r\n    val queryIcon = MutableLiveData<String>()\r\n    val userLocation = MutableLiveData<LatLng>()\r\n    val searchRadius = MutableLiveData(\r\n        application.getSharedPreferences(\"prefs\", Context.MODE_PRIVATE).getInt(\"radius\", 15)\r\n    )\r\n\r\n    init {\r\n        placesList.value = arrayListOf()\r\n        mediator.addSource(appRepository.placesList) {\r\n            Log.d(TAG, \"places retrieved from repo\")\r\n            mediator.value = it\r\n            it.addAll(placesList.value!!)\r\n            placesList.value = it\r\n            Log.d(TAG, \"placesList size is ${placesList.value!!.size}\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Creates a Retrofit call to Google Places API to retrieve JSON data about nearby places\r\n     *@param query String?- the query entered for specific type of nearby places or null for getting all types nearby places\r\n     */\r\n    suspend fun getNearbyPlaces(query: String?) {\r\n        Log.d(TAG, \"getNearbyPlaces called\")\r\n        appRepository.getNearbyPlaces(\r\n            query,\r\n            \"restaurant\",\r\n            userLocation.value!!,\r\n            appKey,\r\n            searchRadius.value!! * 1000\r\n        )\r\n    }\r\n\r\n    fun setPlacesMarkerIcon(list: ArrayList<Place>) {\r\n        if (!queryIcon.value.isNullOrEmpty()) {\r\n            list.forEach {\r\n                when (queryIcon.value) {\r\n                    \"Pizza\" -> it.markerIcon =\r\n                        BitmapDescriptorFactory.fromResource(R.drawable.pizza)\r\n                    \"Burger\" -> it.markerIcon =\r\n                        BitmapDescriptorFactory.fromResource(R.drawable.hamburger)\r\n                    \"Sushi\" -> it.markerIcon =\r\n                        BitmapDescriptorFactory.fromResource(R.drawable.sushi)\r\n                    \"Mexican\" -> it.markerIcon =\r\n                        BitmapDescriptorFactory.fromResource(R.drawable.taco)\r\n                    \"Coffee\" -> it.markerIcon =\r\n                        BitmapDescriptorFactory.fromResource(R.drawable.cafe)\r\n                }\r\n            }\r\n        }\r\n        list.forEach {\r\n            val place = it\r\n            if (place.markerIcon == null) {\r\n                if (place.name.contains(\"pizza\".trim(), true) || place.name.contains(\r\n                        \"pizzeria\".trim(),\r\n                        true\r\n                    ) || place.name.contains(\"פיצה\".trim(), true)\r\n                ) {\r\n                    place.markerIcon = BitmapDescriptorFactory.fromResource(R.drawable.pizza)\r\n                } else if (place.name.contains(\"burger\".trim(), true) || place.name.contains(\r\n                        \"בורגר\".trim(),\r\n                        true\r\n                    )\r\n                ) {\r\n                    place.markerIcon = BitmapDescriptorFactory.fromResource(R.drawable.hamburger)\r\n                } else if (place.name.contains(\"sushi\", true) || place.name.contains(\r\n                        \"סושי\",\r\n                        true\r\n                    )\r\n                ) {\r\n                    place.markerIcon = BitmapDescriptorFactory.fromResource(R.drawable.sushi)\r\n                } else if (place.name.contains(\"cafe\".trim(), true) || place.name.contains(\r\n                        \"קפה\".trim(),\r\n                        true\r\n                    )\r\n                ) {\r\n                    place.markerIcon = BitmapDescriptorFactory.fromResource(R.drawable.cafe)\r\n                } else if (place.name.contains(\"taco\".trim(), true)) {\r\n                    place.markerIcon = BitmapDescriptorFactory.fromResource(R.drawable.taco)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setPlacesDistance(list: ArrayList<Place>) {\r\n        list.forEach {\r\n            val placeLocation = Location(\"destination\")\r\n                .apply {\r\n                    latitude = it.geometry.location.lat\r\n                    longitude = it.geometry.location.lng\r\n                }\r\n            val currentUserLocation = Location(\"current location\")\r\n                .apply {\r\n                    latitude = userLocation.value?.latitude!!\r\n                    longitude = userLocation.value?.longitude!!\r\n                }\r\n            val distance =\r\n                currentUserLocation.distanceTo(placeLocation) / 1000 // from meter to kilometer\r\n            var stringDistance = distance.toString()\r\n            stringDistance =\r\n                stringDistance.substring(0, stringDistance.indexOf(\".\") + 2)\r\n            it.distance = stringDistance.toFloat()\r\n        }\r\n    }\r\n\r\n    fun downloadCurrentUserPhoto(user: FirebaseUser) {\r\n        Log.d(\r\n            TAG,\r\n            \"downloadCurrentUserPhoto called -> downloading photo from ${user.photoUrl.toString()}\"\r\n        )\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentUserPhoto.postValue(\r\n                Picasso.get().load(user.photoUrl).resize(200, 200).get()\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/burgertracker/map/MapViewModel.kt	(revision 828d99583af4d82090c9ed37baee56890d509326)
+++ app/src/main/java/com/example/burgertracker/map/MapViewModel.kt	(date 1610581232484)
@@ -31,7 +31,7 @@
     val appMap = MutableLiveData<GoogleMap>()
     val currentUser = MutableLiveData<FirebaseUser?>()
     val currentUserPhoto = MutableLiveData<Bitmap>()
-    val currentFragment = MutableLiveData<Fragment>()
+    val currentFragment = MutableLiveData<String>()
     val placesList = MutableLiveData<ArrayList<Place>>()
     val mediator = MediatorLiveData<ArrayList<Place>>()
     val queryIcon = MutableLiveData<String>()
Index: app/src/main/java/com/example/burgertracker/map/MapFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.burgertracker.map\r\n\r\nimport android.Manifest\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageButton\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat.checkSelfPermission\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.burgertracker.AppUtils\r\nimport com.example.burgertracker.R\r\nimport com.example.burgertracker.data.Place\r\nimport com.example.burgertracker.databinding.FragmentMapBinding\r\nimport com.example.burgertracker.databinding.InfoWindowBinding\r\nimport com.example.burgertracker.models.OnInfoWindowElemTouchListener\r\nimport com.example.burgertracker.toLatLng\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\nprivate const val TAG = \"MapFragment\"\r\nprivate const val PERMISSION_ID = 10\r\n\r\nclass MapFragment : Fragment(), OnMapReadyCallback {\r\n    private var _binding: FragmentMapBinding? = null\r\n    val binding get() = _binding!!\r\n    private lateinit var mapViewModel: MapViewModel\r\n    private var permissionsResultFlag = false\r\n    private val normalZoom = 17.0F\r\n    private val permissionsNeeded = arrayOf(\r\n        Manifest.permission.ACCESS_COARSE_LOCATION,\r\n        Manifest.permission.ACCESS_FINE_LOCATION,\r\n        Manifest.permission.INTERNET\r\n    )\r\n    private lateinit var likeImageButtonClickListener: OnInfoWindowElemTouchListener\r\n    private lateinit var infoWindow: PlaceInfoWindow\r\n\r\n    override fun onCreate(p0: Bundle?) {\r\n        super.onCreate(p0)\r\n        Log.d(TAG, \"onCreate() called\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        Log.d(TAG, \"onCreateView() called\")\r\n        _binding = FragmentMapBinding.inflate(inflater, container, false)\r\n        val mapFragment =\r\n            childFragmentManager.findFragmentById(R.id.map_fragment) as SupportMapFragment?\r\n        mapFragment?.getMapAsync(this)\r\n        return binding.root\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        Log.d(TAG, \"onViewCreated() called\")\r\n        mapViewModel = ViewModelProvider(requireActivity()).get(MapViewModel::class.java)\r\n        mapViewModel.currentFragment.value = this\r\n        /**checks if\r\n         * no permissions were granted even after requestPermissions() was called from onMapReady() so the user\r\n         * denied the permissionsRequest and now need to display snackBar\r\n         */\r\n        if (!checkPermissions() && mapViewModel.isMapAvailable) {\r\n            showPermissionsSnackBar()\r\n        }\r\n    }\r\n\r\n    override fun onActivityCreated(p0: Bundle?) {\r\n        super.onActivityCreated(p0)\r\n        Log.d(TAG, \"onActivityCreated() called\")\r\n\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        Log.d(TAG, \"onStart() called\")\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    override fun onResume() {\r\n        super.onResume()\r\n        Log.d(TAG, \"onResume() called\")\r\n        if (checkPermissions()) {\r\n            if (mapViewModel.appMap.value != null) {\r\n                AppUtils().getCurrentLocation(requireActivity())\r\n                initFoodTypeRecyclerView()\r\n                initMap()\r\n                initMarkersOnClick()\r\n                initObservers()\r\n                initSearchView()\r\n                if (!mapViewModel.placesList.value.isNullOrEmpty()) {\r\n                    displayPlaces(mapViewModel.placesList.value!!)\r\n                }\r\n            }\r\n        } else if (permissionsResultFlag) {\r\n            showPermissionsSnackBar()\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    override fun onMapReady(p0: GoogleMap) {\r\n        Log.d(TAG, \"onMapReady() called\")\r\n        mapViewModel.appMap.value = p0\r\n        mapViewModel.isMapAvailable = true\r\n        if (!checkPermissions()) {\r\n            requestPermissions(\r\n                permissionsNeeded,\r\n                PERMISSION_ID\r\n            )\r\n        } else {\r\n            //Permissions Granted\r\n            initMap()\r\n            initSearchView()\r\n            initObservers()\r\n            initMarkersOnClick()\r\n            initFoodTypeRecyclerView()\r\n            AppUtils().getCurrentLocation(requireActivity())\r\n            if (!mapViewModel.placesList.value.isNullOrEmpty()) {\r\n                displayPlaces(mapViewModel.placesList.value!!)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        Log.d(TAG, \"onPause() called\")\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        Log.d(TAG, \"onStop() called\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        Log.d(TAG, \"onDestroyView() called\")\r\n        _binding = null\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        Log.d(TAG, \"onRequestPermissionsResult() called\")\r\n        permissionsResultFlag = true\r\n        if (grantResults.all {\r\n                it == PackageManager.PERMISSION_GRANTED\r\n            }) {\r\n            Log.d(TAG, \"Permissions granted\")\r\n        } else {\r\n            showPermissionsSnackBar()\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.M)\r\n    fun checkPermissions() = permissionsNeeded.all {\r\n        checkSelfPermission(requireContext(), it) == PackageManager.PERMISSION_GRANTED\r\n    }\r\n\r\n    private fun initMap() {\r\n        Log.d(TAG, \"initMap called\")\r\n        if (ActivityCompat.checkSelfPermission(\r\n                requireContext(),\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                requireContext(),\r\n                Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            return\r\n        }\r\n        //mapViewModel.appMap.value!!.mapType = GoogleMap.MAP_TYPE_HYBRID\r\n        mapViewModel.appMap.value!!.uiSettings.isMyLocationButtonEnabled = true\r\n        mapViewModel.appMap.value!!.uiSettings.isCompassEnabled = true\r\n        mapViewModel.appMap.value!!.isMyLocationEnabled = true\r\n        mapViewModel.appMap.value!!.uiSettings.isZoomControlsEnabled = true\r\n        mapViewModel.appMap.value!!.setOnMyLocationClickListener {\r\n            mapViewModel.appMap.value!!.animateCamera(\r\n                CameraUpdateFactory.newLatLngZoom(\r\n                    it.toLatLng(), mapViewModel.appMap.value!!.cameraPosition.zoom\r\n                )\r\n            )\r\n        }\r\n        val infoWindowBinding = InfoWindowBinding.inflate(layoutInflater)\r\n        likeImageButtonClickListener =\r\n            object : OnInfoWindowElemTouchListener(infoWindowBinding.like) {\r\n                override fun onClickConfirmed(v: View?, marker: Marker?) {\r\n                    Log.d(TAG, \"like clicked\")\r\n                    val likeButton = v as ImageButton\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        infoWindowBinding.placeName.text,\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n        // MapWrapperLayout initialization\r\n        // 39 - default marker height\r\n        // 20 - offset between the default InfoWindow bottom edge and it's content bottom edge\r\n        binding.mapWrapperLayout.init(\r\n            mapViewModel.appMap.value!!,\r\n            AppUtils().getPixelsFromDp(requireContext(), 39 + 20.toFloat())\r\n        )\r\n        infoWindow =\r\n            PlaceInfoWindow(\r\n                infoWindowBinding,\r\n                binding.mapWrapperLayout,\r\n                likeImageButtonClickListener\r\n            )\r\n        mapViewModel.appMap.value!!.setInfoWindowAdapter(infoWindow)\r\n        infoWindowBinding.like.setOnTouchListener(likeImageButtonClickListener)\r\n\r\n    }\r\n\r\n    /**\r\n     * Display all places from placesList on the map\r\n     */\r\n    private fun displayPlaces(placesList: ArrayList<Place>) {\r\n        Log.d(TAG, \"displayPlaces() called\")\r\n        for (place in placesList) {\r\n            val markerOptions = MarkerOptions()\r\n                .position(LatLng(place.geometry.location.lat, place.geometry.location.lng))\r\n                .title(place.name)\r\n                .icon(place.markerIcon)\r\n            mapViewModel.appMap.value!!.addMarker(markerOptions)\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Initializes the RecyclerView and [FoodListAdapter]\r\n     */\r\n    private fun initFoodTypeRecyclerView() {\r\n        Log.d(TAG, \"initFoodRecyclerView() called\")\r\n        binding.foodTypeList.layoutManager =\r\n            LinearLayoutManager(requireContext()).apply {\r\n                orientation = RecyclerView.HORIZONTAL\r\n            }\r\n        val adapter = FoodListAdapter()\r\n            .apply {\r\n                setData(\r\n                    arrayListOf(\r\n                        \"Pizza\",\r\n                        \"Sushi\",\r\n                        \"Burger\",\r\n                        \"Mexican\",\r\n                        \"Italian\",\r\n                        \"Coffee\"\r\n                    )\r\n                )\r\n            }\r\n        adapter.setClickListener(object : ViewHolderClickListener {\r\n            override fun click() {\r\n                mapViewModel.placesList.value?.clear()\r\n                mapViewModel.appMap.value!!.clear()\r\n                mapViewModel.queryIcon.value = adapter.itemClicked\r\n                CoroutineScope(Dispatchers.IO).launch {\r\n                    mapViewModel.getNearbyPlaces(adapter.itemClicked)\r\n                }\r\n            }\r\n        })\r\n        binding.foodTypeList.adapter = adapter\r\n    }\r\n\r\n    private fun initSearchView() {\r\n        Log.d(TAG, \"initSearchView() called\")\r\n        binding.mapSearch.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                Log.d(TAG, \" calling getNearbyPlaces from query\")\r\n                mapViewModel.placesList.value?.clear()\r\n                mapViewModel.appMap.value!!.clear()\r\n                CoroutineScope(Dispatchers.IO).launch {\r\n                    mapViewModel.getNearbyPlaces(query)\r\n                }\r\n                //clearFocus() closes the keyboard after performing the search\r\n                binding.mapSearch.clearFocus()\r\n                return true\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                return true\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun initObservers() {\r\n        Log.d(TAG, \"initObservers called\")\r\n        mapViewModel.userLocation.observe(this, {\r\n            Log.d(TAG, \"userLocation observer triggered -> $it\")\r\n            //initMap()\r\n            mapViewModel.appMap.value!!.animateCamera(\r\n                CameraUpdateFactory.newLatLngZoom(\r\n                    it, normalZoom\r\n                )\r\n            )\r\n            mapViewModel.appMap.value!!.setOnMyLocationButtonClickListener {\r\n                mapViewModel.appMap.value!!.animateCamera(\r\n                    CameraUpdateFactory.newLatLngZoom(\r\n                        it, normalZoom\r\n                    )\r\n                )\r\n                true\r\n            }\r\n\r\n            if (mapViewModel.placesList.value.isNullOrEmpty()) {\r\n                Log.d(TAG, \"calling getNearbyPlaces() from placesList observer\")\r\n                CoroutineScope(Dispatchers.IO).launch {\r\n                    mapViewModel.getNearbyPlaces(null)\r\n                }\r\n            }\r\n        })\r\n        mapViewModel.mediator.observe(this, {\r\n            Log.d(TAG, \"Mediator observer triggered -> calling displayPlaces()\")\r\n            mapViewModel.setPlacesDistance(it)\r\n            mapViewModel.setPlacesMarkerIcon(it)\r\n            displayPlaces(it)\r\n        })\r\n        mapViewModel.placesList.observe(this, {\r\n            if (!it.isNullOrEmpty()) {\r\n                Log.d(TAG, \"placesList observer triggered -> calling displayPlaces()\")\r\n                displayPlaces(it)\r\n            }\r\n        })\r\n        mapViewModel.currentUserPhoto.observe(this, {\r\n            Log.d(TAG, \"currentUserPhoto observer triggered -> displaying photo $it\")\r\n            (requireActivity() as MapActivity).binding.navView.getHeaderView(0)\r\n                .findViewById<ImageView>(R.id.userPhoto)\r\n                .setImageBitmap(it)\r\n        })\r\n\r\n        mapViewModel.currentUser.observe(this, {\r\n            if (it != null) {\r\n                Log.d(TAG, \"currentUser observer triggered -> displaying user ${it.displayName}\")\r\n                (requireActivity() as MapActivity).binding.navView.getHeaderView(0)\r\n                    .findViewById<TextView>(R.id.userName).text = it.displayName\r\n                (requireActivity() as MapActivity).binding.navView.getHeaderView(0)\r\n                    .findViewById<TextView>(R.id.userEmail).text = it.email\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun initMarkersOnClick() {\r\n        Log.d(TAG, \"enableMarkersOnClick called\")\r\n        mapViewModel.appMap.value!!.setOnMarkerClickListener {\r\n            val place = mapViewModel.placesList.value?.find { place ->\r\n                LatLng(place.geometry.location.lat, place.geometry.location.lng) == it.position\r\n            }!!\r\n            infoWindow.setPlace(place)\r\n            mapViewModel.appMap.value!!.animateCamera(\r\n                CameraUpdateFactory.newLatLngZoom(\r\n                    LatLng(\r\n                        place.geometry.location.lat,\r\n                        place.geometry.location.lng\r\n                    ), mapViewModel.appMap.value!!.cameraPosition.zoom\r\n                )\r\n            ).apply {\r\n                Log.d(\r\n                    TAG,\r\n                    \"Marker Location is ${mapViewModel.appMap.value!!.cameraPosition.target}\"\r\n                )\r\n            }\r\n            false\r\n        }\r\n    }\r\n\r\n    private fun showPermissionsSnackBar() {\r\n        Log.d(TAG, \"showPermissionsSnackBar called\")\r\n        Snackbar.make(\r\n            binding.mapWrapperLayout,\r\n            \"Please Enable Location Permission\",\r\n            Snackbar.LENGTH_INDEFINITE\r\n        ).setAction(\r\n            \"Enable Location\"\r\n        ) {\r\n            val settingsIntent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n            requireActivity().startActivityForResult(settingsIntent, 1)\r\n\r\n        }\r\n            .show()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/burgertracker/map/MapFragment.kt	(revision 828d99583af4d82090c9ed37baee56890d509326)
+++ app/src/main/java/com/example/burgertracker/map/MapFragment.kt	(date 1610581232504)
@@ -81,7 +81,7 @@
         super.onViewCreated(view, savedInstanceState)
         Log.d(TAG, "onViewCreated() called")
         mapViewModel = ViewModelProvider(requireActivity()).get(MapViewModel::class.java)
-        mapViewModel.currentFragment.value = this
+        mapViewModel.currentFragment.value = this::class.java.name
         /**checks if
          * no permissions were granted even after requestPermissions() was called from onMapReady() so the user
          * denied the permissionsRequest and now need to display snackBar
Index: app/src/main/java/com/example/burgertracker/login/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.burgertracker.login\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.burgertracker.R\r\nimport com.example.burgertracker.databinding.FragmentLoginBinding\r\nimport com.example.burgertracker.map.MapViewModel\r\nimport com.firebase.ui.auth.AuthUI\r\nimport com.firebase.ui.auth.IdpResponse\r\nimport com.google.firebase.FirebaseException\r\nimport com.google.firebase.auth.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nprivate const val TAG = \"LoginFragment\"\r\nprivate const val RC_SIGN_IN = 123\r\n\r\nclass LoginFragment : Fragment() {\r\n    private var _binding: FragmentLoginBinding? = null\r\n    private val binding get() = _binding!!\r\n    private lateinit var mapViewModel: MapViewModel\r\n    private lateinit var auth: FirebaseAuth\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        Log.d(TAG, \"onCreateView() called\")\r\n        _binding = FragmentLoginBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        Log.d(TAG, \"onActivityCreated() called\")\r\n        super.onActivityCreated(savedInstanceState)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        Log.d(TAG, \"onViewCreated() called\")\r\n        super.onViewCreated(view, savedInstanceState)\r\n        mapViewModel = ViewModelProvider(requireActivity()).get(MapViewModel::class.java)\r\n        mapViewModel.currentFragment.value = this\r\n        auth = FirebaseAuth.getInstance()\r\n        if (auth.currentUser != null) {\r\n            Log.d(\r\n                TAG,\r\n                \"User ${auth.currentUser!!.displayName} already logged in -> navigating to MapFragment \"\r\n            )\r\n            fetchUserData(auth.currentUser!!)\r\n            findNavController().navigate(R.id.action_loginFragment_to_mapsFragment)\r\n            onDestroyView()\r\n        } else {\r\n            auth.setLanguageCode(\"en\")\r\n            binding.sendSms.setOnClickListener {\r\n                val options = PhoneAuthOptions.newBuilder(auth)\r\n                    .setPhoneNumber(binding.phoneNumberEditText.text.toString()) // Phone number to verify\r\n                    .setTimeout(60L, TimeUnit.SECONDS) // Timeout and unit\r\n                    .setActivity(requireActivity()) // Activity (for callback binding)\r\n                    .setCallbacks(object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {\r\n\r\n                        override fun onVerificationCompleted(p0: PhoneAuthCredential) {\r\n                            Log.d(TAG, \"Verification completed \")\r\n                            signInWithPhoneAuthCredential(p0)\r\n                        }\r\n\r\n                        override fun onVerificationFailed(p0: FirebaseException) {\r\n                            Log.e(TAG, \"Verification failed -> ${p0.localizedMessage}\")\r\n                        }\r\n\r\n                        override fun onCodeSent(\r\n                            p0: String,\r\n                            p1: PhoneAuthProvider.ForceResendingToken\r\n                        ) {\r\n                            super.onCodeSent(p0, p1)\r\n                            Log.d(TAG, \"Verification code sent\")\r\n                        }\r\n\r\n                        override fun onCodeAutoRetrievalTimeOut(p0: String) {\r\n                            super.onCodeAutoRetrievalTimeOut(p0)\r\n                            Log.d(TAG, \"Verification code timeout\")\r\n                        }\r\n                    }) // OnVerificationStateChangedCallbacks\r\n                    .build()\r\n                PhoneAuthProvider.verifyPhoneNumber(options)\r\n\r\n            }\r\n            binding.googleLoginBtn.setOnClickListener {\r\n                signInWithFirebaseProvider()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == RC_SIGN_IN) {\r\n            val response = IdpResponse.fromResultIntent(data)\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                // Successfully signed in\r\n                val user = FirebaseAuth.getInstance().currentUser\r\n                Log.i(TAG, \"Login Successfully -> current user is $user\")\r\n                if (user != null) {\r\n                    fetchUserData(user)\r\n                    findNavController().navigate(R.id.action_loginFragment_to_mapsFragment)\r\n                }\r\n            } else {\r\n                Log.e(TAG, \"Login Failed -> ${response?.error}\")\r\n                // Sign in failed. If response is null the user canceled the\r\n                // sign-in flow using the back button. Otherwise check\r\n                // response.getError().getErrorCode() and handle the error.\r\n                // ...\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    private fun signInWithFirebaseProvider() {\r\n        val providers = arrayListOf(\r\n            AuthUI.IdpConfig.GoogleBuilder().build()\r\n        )\r\n        // Create and launch sign-in intent\r\n        startActivityForResult(\r\n            AuthUI.getInstance()\r\n                .createSignInIntentBuilder()\r\n                .setAvailableProviders(providers)\r\n                .setIsSmartLockEnabled(false)\r\n                .build(),\r\n            RC_SIGN_IN\r\n        )\r\n\r\n    }\r\n\r\n    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {\r\n        auth.signInWithCredential(credential)\r\n            .addOnCompleteListener(requireActivity()) { task ->\r\n                if (task.isSuccessful) {\r\n                    // Sign in success, update UI with the signed-in user's information\r\n                    Log.d(TAG, \"signInWithCredential:success\")\r\n                    val user = task.result.user\r\n                    if (user != null)\r\n                        fetchUserData(user)\r\n                    findNavController().navigate(R.id.action_loginFragment_to_mapsFragment)\r\n                    // ...\r\n                } else {\r\n                    // Sign in failed, display a message and update the UI\r\n                    Log.w(TAG, \"signInWithCredential:failure\", task.exception)\r\n                    if (task.exception is FirebaseAuthInvalidCredentialsException) {\r\n                        Log.e(TAG, \"Verification code invalid\")\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun fetchUserData(user: FirebaseUser) {\r\n        mapViewModel.downloadCurrentUserPhoto(user)\r\n        mapViewModel.currentUser.value = user\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/burgertracker/login/LoginFragment.kt	(revision 828d99583af4d82090c9ed37baee56890d509326)
+++ app/src/main/java/com/example/burgertracker/login/LoginFragment.kt	(date 1610581232496)
@@ -45,7 +45,7 @@
         Log.d(TAG, "onViewCreated() called")
         super.onViewCreated(view, savedInstanceState)
         mapViewModel = ViewModelProvider(requireActivity()).get(MapViewModel::class.java)
-        mapViewModel.currentFragment.value = this
+        mapViewModel.currentFragment.value = this::class.java.name
         auth = FirebaseAuth.getInstance()
         if (auth.currentUser != null) {
             Log.d(
